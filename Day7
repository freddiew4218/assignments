1. Describe the problem generics address.

   Generics address the problem of code duplication and type safety in programming. Without generics, you would have to write separate code for each data type you want to handle, which leads to redundancy. Generics allow you to write a single, type-agnostic piece of code that can work with any data type, providing greater flexibility and reusability. Additionally, generics ensure type safety at compile-time, reducing runtime errors by catching type mismatches early.

2. How would you create a list of strings, using the generic List class?

   To create a list of strings using the generic `List` class in C#, you would write:

   ```
   List<string> listOfStrings = new List<string>();
   ```

3. How many generic type parameters does the Dictionary class have?

   The `Dictionary` class has two generic type parameters: one for the key type and one for the value type. For example:

   ```
   Dictionary<TKey, TValue>
   ```

4. True/False. When a generic class has multiple type parameters, they must all match.

   False. When a generic class has multiple type parameters, they do not have to match. Each type parameter can be different and can represent different types.

5. What method is used to add items to a List object?

   The method used to add items to a `List` object is `Add`. For example:

   ```
   List<string> listOfStrings = new List<string>();
   listOfStrings.Add("example");
   ```

6. Name two methods that cause items to be removed from a List.

   Two methods that cause items to be removed from a `List` are `Remove` and `RemoveAt`. 

   - `Remove` removes the first occurrence of a specific object from the list.
   - `RemoveAt` removes the element at the specified index.

7. How do you indicate that a class has a generic type parameter?

   You indicate that a class has a generic type parameter by specifying the type parameter in angle brackets (`<>`) after the class name. For example:

   ```
   public class MyClass<T>
   {
       // Class implementation
   }
   ```

8. True/False. Generic classes can only have one generic type parameter.

   False. Generic classes can have multiple generic type parameters. For example:

   ```
   public class MyClass<T1, T2>
   {
       // Class implementation
   }
   ```

9. True/False. Generic type constraints limit what can be used for the generic type.

   True. Generic type constraints limit what types can be used as generic type parameters, providing additional type safety and capabilities. For example, you can constrain a type to implement a specific interface or inherit from a specific class.

10. True/False. Constraints let you use the methods of the thing you are constraining to.

    True. Constraints allow you to use the methods, properties, and other members of the type you are constraining to. For example, if you constrain a type to implement an interface, you can use the methods of that interface within your generic class.


### 1. Custom Stack Class `MyStack<T>`

```
public class MyStack<T>
{
    private List<T> _elements = new List<T>();

    // Returns the count of elements in the stack
    public int Count()
    {
        return _elements.Count;
    }

    // Removes and returns the top element from the stack
    public T Pop()
    {
        if (_elements.Count == 0)
        {
            throw new InvalidOperationException("Stack is empty.");
        }

        T element = _elements[_elements.Count - 1];
        _elements.RemoveAt(_elements.Count - 1);
        return element;
    }

    // Adds an element to the top of the stack
    public void Push(T element)
    {
        _elements.Add(element);
    }
}
```

### 2. Generic List Data Structure `MyList<T>`


```
public class MyList<T>
{
    private List<T> _elements = new List<T>();

    // Adds an element to the list
    public void Add(T element)
    {
        _elements.Add(element);
    }

    // Removes the element at the specified index and returns it
    public T Remove(int index)
    {
        if (index < 0 || index >= _elements.Count)
        {
            throw new ArgumentOutOfRangeException("Index is out of range.");
        }

        T element = _elements[index];
        _elements.RemoveAt(index);
        return element;
    }

    // Checks if the list contains the specified element
    public bool Contains(T element)
    {
        return _elements.Contains(element);
    }

    // Clears all elements from the list
    public void Clear()
    {
        _elements.Clear();
    }

    // Inserts an element at the specified index
    public void InsertAt(T element, int index)
    {
        if (index < 0 || index > _elements.Count)
        {
            throw new ArgumentOutOfRangeException("Index is out of range.");
        }

        _elements.Insert(index, element);
    }

    // Deletes the element at the specified index
    public void DeleteAt(int index)
    {
        if (index < 0 || index >= _elements.Count)
        {
            throw new ArgumentOutOfRangeException("Index is out of range.");
        }

        _elements.RemoveAt(index);
    }

    // Finds and returns the element at the specified index
    public T Find(int index)
    {
        if (index < 0 || index >= _elements.Count)
        {
            throw new ArgumentOutOfRangeException("Index is out of range.");
        }

        return _elements[index];
    }
}
```

### 3. Generic Repository Class `GenericRepository<T>`


```
public interface IEntity
{
    int Id { get; set; }
}

public interface IRepository<T> where T : class, IEntity
{
    void Add(T item);
    void Remove(T item);
    void Save();
    IEnumerable<T> GetAll();
    T GetById(int id);
}
```


```
public class GenericRepository<T> : IRepository<T> where T : class, IEntity
{
    private readonly List<T> _dataSource = new List<T>();

    // Adds an item to the repository
    public void Add(T item)
    {
        _dataSource.Add(item);
    }

    // Removes an item from the repository
    public void Remove(T item)
    {
        _dataSource.Remove(item);
    }

    // Saves changes to the repository (not needed for in-memory data, included for completeness)
    public void Save()
    {
        // In a real implementation, this would persist changes to the data source
    }

    // Gets all items from the repository
    public IEnumerable<T> GetAll()
    {
        return _dataSource;
    }

    // Gets an item by its ID
    public T GetById(int id)
    {
        return _dataSource.FirstOrDefault(item => item.Id == id);
    }
}
```
